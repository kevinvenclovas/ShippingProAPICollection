//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>

/*
 * ╱╲╱╲ STOP ╱╲╱╲
 * ╱╲╱╲ STOP ╱╲╱╲
 * ╱╲╱╲ STOP ╱╲╱╲
 * 
 * (⌐■_■)
 * PLEASSSSEEEEEEEE TAKE A LOOK AT LINE 3890 
 * 
 * ╱╲╱╲ STOP ╱╲╱╲
 * ╱╲╱╲ STOP ╱╲╱╲
 * ╱╲╱╲ STOP ╱╲╱╲
 */

//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ShippingProAPICollection._Provider.DHL
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class DHLClient
    {
        private string _baseUrl = "https://api-eu.dhl.com/parcel/de/shipping/v2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public DHLClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Return API version
        /// </summary>
        /// <remarks>
        /// Returns the current version of the API as major.minor.patch. Furthermore, it will also return more details (semantic version number, revision, environment) of the API layer.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ServiceInformation> RootGetAsync()
        {
            return RootGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return API version
        /// </summary>
        /// <remarks>
        /// Returns the current version of the API as major.minor.patch. Furthermore, it will also return more details (semantic version number, revision, environment) of the API layer.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceInformation> RootGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceInformation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Download PDF document
        /// </summary>
        /// <remarks>
        /// Public download URL for shipment labels and documents. The URL is provided in the response of the POST /orders or GET /orders resources. The document is identified via the token query parameter. There is no additional authorization, the resource URL can be shared. Please protect the URL as needed. The call returns a PDF label.
        /// </remarks>
        /// <param name="token">Identifies PDF document and requested print settings for download.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LabelDataResponse> GetLabelAsync(string token)
        {
            return GetLabelAsync(token, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download PDF document
        /// </summary>
        /// <remarks>
        /// Public download URL for shipment labels and documents. The URL is provided in the response of the POST /orders or GET /orders resources. The document is identified via the token query parameter. There is no additional authorization, the resource URL can be shared. Please protect the URL as needed. The call returns a PDF label.
        /// </remarks>
        /// <param name="token">Identifies PDF document and requested print settings for download.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabelDataResponse> GetLabelAsync(string token, System.Threading.CancellationToken cancellationToken)
        {
            if (token == null)
                throw new System.ArgumentNullException("token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/labels?");
            urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve daily manifest document
        /// </summary>
        /// <remarks>
        /// Return the manifest document for the specific date (abbreviated ISO8601 format YYYY-MM-DD). If no date is provided, the manifest for today will be returned. The manifest PDF document will list the shipments for your EKP, separated by billing numbers. Potentially, the document is large and response time will reflect this. &lt;br /&gt;Additionally, the response contains a mapping of billing numbers to sheet numbers of the manifest and a mapping of shipment numbers to sheet numbers.&lt;br /&gt;The call can be repeated as often as needed. Should a date be provided which is too old or lies within the future, HTTP 400 is returned.
        /// </remarks>
        /// <param name="billingNumber">Customer billingNumber number.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.
        /// <br/> Default is include the base64 encoded labels.</param>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SingleManifestResponse> GetManifestsAsync(string billingNumber, string date, IncludeDocs? includeDocs, string accept_Language)
        {
            return GetManifestsAsync(billingNumber, date, includeDocs, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve daily manifest document
        /// </summary>
        /// <remarks>
        /// Return the manifest document for the specific date (abbreviated ISO8601 format YYYY-MM-DD). If no date is provided, the manifest for today will be returned. The manifest PDF document will list the shipments for your EKP, separated by billing numbers. Potentially, the document is large and response time will reflect this. &lt;br /&gt;Additionally, the response contains a mapping of billing numbers to sheet numbers of the manifest and a mapping of shipment numbers to sheet numbers.&lt;br /&gt;The call can be repeated as often as needed. Should a date be provided which is too old or lies within the future, HTTP 400 is returned.
        /// </remarks>
        /// <param name="billingNumber">Customer billingNumber number.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.
        /// <br/> Default is include the base64 encoded labels.</param>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SingleManifestResponse> GetManifestsAsync(string billingNumber, string date, IncludeDocs? includeDocs, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/manifests?");
            if (billingNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("billingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(billingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeDocs != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDocs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDocs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SingleManifestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<LabelDataResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark shipments as being ready for shipping
        /// </summary>
        /// <remarks>
        /// Shipments are normally ''closed out'' at a fixed time of the day (such as 6 pm, configured by EKP/account) for the date provided as shipDate in the create call. 
        /// <br/>&lt;br /&gt;This call allows forcing the closeout for sets of shipments earlier. This will also override the original shipDate. Afterwards, the shipment cannot be changed and the shipment labels cannot be queried anymore (however they may remain cached for limited duration). 
        /// <br/>Calling closeout repeatedly for the same shipments will result in HTTP 400 for the second call. HTTP 400 will also be returned if the automatic closeout happened prior to the call. It is however possible to add new shipments, they will be manifested as well and be part of the day's manifest. 
        /// <br/>&lt;br /&gt;Note on billing: The manifesting step has billing implications. Some products (Warenpost, Parcel International partially) are billed based on the shipment data available to DHL at the end of the day. All other products (including DHL Paket Standard) are billed based on production data. For more details, please contact your account representative. 
        /// <br/>
        /// <br/>#### Request
        /// <br/>It's changing the status of the shipment, so parameters are provided in the body. 
        /// <br/>* ''profile'' attribute - defines the user group profile. A user group is permitted to specific billing numbers. Shipments are only closed out if they belong to a billing number that the user group profile is entitled to use. This attribute is mandatory. Please use the standard user group profile ''STANDARD_GRUPPENPROFIL'' if no dedicated user group profile is available. 
        /// <br/>* ''billingNumber'' attribute - defines the billing number for which shipments shall be closed out. If a billing number is set, then only the shipments of that billing number are closed out. In that case no list of specific shipment numbers needs to be passed. 
        /// <br/>* ''shipmentNumbers'' attribute - lists the specific shipping numbers of the shipments that shall be closed out. 
        /// <br/>If all shipments shall be closed, the query parameter ''all'' needs to be set to ''true''. In that case neither a billing number nor a list of shipment numbers need to be passed in the request body. 
        /// <br/>
        /// <br/>#### Response 
        /// <br/>* Closing status for each shipment
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="all">Specify if all applicable shipments shall be marked as being ready for shipping.</param>
        /// <returns>Response for manifesting request taking multiple input elements</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MultipleManifestResponse> ManifestsPostAsync(string accept_Language, bool? all, ShipmentManifestingRequest body)
        {
            return ManifestsPostAsync(accept_Language, all, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark shipments as being ready for shipping
        /// </summary>
        /// <remarks>
        /// Shipments are normally ''closed out'' at a fixed time of the day (such as 6 pm, configured by EKP/account) for the date provided as shipDate in the create call. 
        /// <br/>&lt;br /&gt;This call allows forcing the closeout for sets of shipments earlier. This will also override the original shipDate. Afterwards, the shipment cannot be changed and the shipment labels cannot be queried anymore (however they may remain cached for limited duration). 
        /// <br/>Calling closeout repeatedly for the same shipments will result in HTTP 400 for the second call. HTTP 400 will also be returned if the automatic closeout happened prior to the call. It is however possible to add new shipments, they will be manifested as well and be part of the day's manifest. 
        /// <br/>&lt;br /&gt;Note on billing: The manifesting step has billing implications. Some products (Warenpost, Parcel International partially) are billed based on the shipment data available to DHL at the end of the day. All other products (including DHL Paket Standard) are billed based on production data. For more details, please contact your account representative. 
        /// <br/>
        /// <br/>#### Request
        /// <br/>It's changing the status of the shipment, so parameters are provided in the body. 
        /// <br/>* ''profile'' attribute - defines the user group profile. A user group is permitted to specific billing numbers. Shipments are only closed out if they belong to a billing number that the user group profile is entitled to use. This attribute is mandatory. Please use the standard user group profile ''STANDARD_GRUPPENPROFIL'' if no dedicated user group profile is available. 
        /// <br/>* ''billingNumber'' attribute - defines the billing number for which shipments shall be closed out. If a billing number is set, then only the shipments of that billing number are closed out. In that case no list of specific shipment numbers needs to be passed. 
        /// <br/>* ''shipmentNumbers'' attribute - lists the specific shipping numbers of the shipments that shall be closed out. 
        /// <br/>If all shipments shall be closed, the query parameter ''all'' needs to be set to ''true''. In that case neither a billing number nor a list of shipment numbers need to be passed in the request body. 
        /// <br/>
        /// <br/>#### Response 
        /// <br/>* Closing status for each shipment
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="all">Specify if all applicable shipments shall be marked as being ready for shipping.</param>
        /// <returns>Response for manifesting request taking multiple input elements</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MultipleManifestResponse> ManifestsPostAsync(string accept_Language, bool? all, ShipmentManifestingRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/manifests?");
            if (all != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("all") + "=").Append(System.Uri.EscapeDataString(ConvertToString(all, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultipleManifestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<LabelDataResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve shipment documents - labels and customs documents
        /// </summary>
        /// <remarks>
        /// Returns documents for existing shipment(s). The call accepts multiple shipment numbers and will provide sets of documents for those. The **format (PDF,ZPL)** and **method of delivery (URL, encoded, data)** can be selected for **all** shipments and labels in that call. You cannot chose one format and delivery method for one label and different for another label within the same call. You can also specify if you want regular labels, return labels, cod labels, or customsDoc. Any combination is possible.
        /// <br/>
        /// <br/>The call returns for each shipment number the status indicator and the selected labels and documents. If a label type (for example a cod label) does not exist for a shipment, it will not be returned. This is not an error. If you were sending multiple shipments, you will get an HTTP 207 response (multistatus) with detailed status for each shipment. Other standard HTTP response codes (200, 400, 401, 429, 500) are possible as well. Labels can be either provided as part of the response (base64 encoded for PDF, text for ZPL) or via URL link for view and download (PDF). Note that the format settings per query parameters apply to the shipping label. Retoure label paper type can be specified separately since a different printer may be used here. If requesting labels to be returned as URL for separate download, the URLs provided can be shared.
        /// </remarks>
        /// <param name="shipment">This parameter identifies shipments. The parameter can be used multiple times in one request to get the labels and/or documents for up to 30 shipments maximum. Only documents and label for shipments that are not yet closed can be retrieved.</param>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="docFormat">**Defines** the **printable** document format to be used for label and manifest documents.</param>
        /// <param name="printFormat">**Defines** the print medium for the shipping label. The different option vary from standard papersizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="retourePrintFormat">**Defines** the print medium for the return shipping label. This parameter is only usable, if you do not use **combined printing**. The different option vary from standard papersizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.
        /// <br/> Default is include the base64 encoded labels.</param>
        /// <param name="combine">If set, label and return label for one shipment will be printed as single PDF document with possibly multiple pages. Else, those two labels come as separate documents. The option does not affect customs documents and COD labels.</param>
        /// <returns>Success response for requests with a single shipment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LabelDataResponse> GetOrderAsync(System.Collections.Generic.IEnumerable<string> shipment, string accept_Language, DocFormat? docFormat, PrintFormat? printFormat, RetourePrintFormat? retourePrintFormat, IncludeDocs2? includeDocs, bool? combine)
        {
            return GetOrderAsync(shipment, accept_Language, docFormat, printFormat, retourePrintFormat, includeDocs, combine, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve shipment documents - labels and customs documents
        /// </summary>
        /// <remarks>
        /// Returns documents for existing shipment(s). The call accepts multiple shipment numbers and will provide sets of documents for those. The **format (PDF,ZPL)** and **method of delivery (URL, encoded, data)** can be selected for **all** shipments and labels in that call. You cannot chose one format and delivery method for one label and different for another label within the same call. You can also specify if you want regular labels, return labels, cod labels, or customsDoc. Any combination is possible.
        /// <br/>
        /// <br/>The call returns for each shipment number the status indicator and the selected labels and documents. If a label type (for example a cod label) does not exist for a shipment, it will not be returned. This is not an error. If you were sending multiple shipments, you will get an HTTP 207 response (multistatus) with detailed status for each shipment. Other standard HTTP response codes (200, 400, 401, 429, 500) are possible as well. Labels can be either provided as part of the response (base64 encoded for PDF, text for ZPL) or via URL link for view and download (PDF). Note that the format settings per query parameters apply to the shipping label. Retoure label paper type can be specified separately since a different printer may be used here. If requesting labels to be returned as URL for separate download, the URLs provided can be shared.
        /// </remarks>
        /// <param name="shipment">This parameter identifies shipments. The parameter can be used multiple times in one request to get the labels and/or documents for up to 30 shipments maximum. Only documents and label for shipments that are not yet closed can be retrieved.</param>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="docFormat">**Defines** the **printable** document format to be used for label and manifest documents.</param>
        /// <param name="printFormat">**Defines** the print medium for the shipping label. The different option vary from standard papersizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="retourePrintFormat">**Defines** the print medium for the return shipping label. This parameter is only usable, if you do not use **combined printing**. The different option vary from standard papersizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.
        /// <br/> Default is include the base64 encoded labels.</param>
        /// <param name="combine">If set, label and return label for one shipment will be printed as single PDF document with possibly multiple pages. Else, those two labels come as separate documents. The option does not affect customs documents and COD labels.</param>
        /// <returns>Success response for requests with a single shipment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabelDataResponse> GetOrderAsync(System.Collections.Generic.IEnumerable<string> shipment, string accept_Language, DocFormat? docFormat, PrintFormat? printFormat, RetourePrintFormat? retourePrintFormat, IncludeDocs2? includeDocs, bool? combine, System.Threading.CancellationToken cancellationToken)
        {
            if (shipment == null)
                throw new System.ArgumentNullException("shipment");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            foreach (var item_ in shipment) { urlBuilder_.Append(System.Uri.EscapeDataString("shipment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (docFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("docFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(docFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (printFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("printFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(printFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (retourePrintFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("retourePrintFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(retourePrintFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeDocs != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDocs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDocs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (combine != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("combine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(combine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<LabelDataResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create one or more shipments and their documents. (This is the primary call of the API.)
        /// </summary>
        /// <remarks>
        /// This request is used to create one or more shipments and return corresponding shipment tracking numbers, labels, and documentation. Up to 30 shipments can be created in a single call. 
        /// <br/>#### Request 
        /// <br/>The selected products and corresponding billing numbers, as well as the desired services and package details are required to create a shipment. Each shipment can have a dedicated shipper address. The example request body contains sample values for most services. 
        /// <br/>#### Response 
        /// <br/>The request will return shipment tracking numbers and the applicable labels for each shipment. If multiple shipments have been included, an HTTP 207 response (multistatus) is returned and holds detailed status for each shipment. Other standard HTTP response codes (401, 500, 400, 200, 429) are possible, too. Labels can be either provided as part of the response (base64 encoded for PDF, text for ZPL) or via URL link for view and download. Note that the format settings per query parameters apply to the shipping label. It may also apply to other labels included, depending on the configuration of your account. Label paper for return shipments can be specified separately since a different printer may be used here. If requesting labels to be provided as URL for separate download, the URLs can be shared.
        /// <br/>#### Validation  
        /// <br/>It is recommended to validate the request first prior to shipment creation by setting the `validate` query parameter to `true`. Especially, during development and test, it is recommended to perform this validation. This functionality supports both 
        /// <br/>* JSON schema validation (against this API description). During development and test, it is recommended to do this validation. JSON schema is available for local validation 
        /// <br/>* Dry run against the DHL backend
        /// <br/>
        /// <br/>If this succeeds, actual shipment creation will also succeed.
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="validate">If provided and set to `true`, the input document will be: 
        /// <br/> * validated against JSON schema (/orders/ endpoint) at the API layer. In case of errors, HTTP 400 and details will be returned. 
        /// <br/> * validated against the DHL backend. 
        /// <br/>
        /// <br/>In that case, no state changes are happening, no data is stored, shipments neither deleted nor created, no labels being returned. The call will return a status (200, 400) for each shipment element.</param>
        /// <param name="mustEncode">Legacy name **printOnlyIfCodable**. If set to *true*, labels will only be created if an address is encodable. This is only relevant for German consignee addresses. If set to false or left out, addresses, that are not encodable will be printed even though you receive a warning.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.</param>
        /// <param name="docFormat">**Defines** the **printable** document format to be used for label and manifest documents.</param>
        /// <param name="printFormat">**Defines** the print medium for the shipping label. The different option vary from standard paper sizes DIN A4 and DIN A5 to specific label print formats.
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="retourePrintFormat">**Defines** the print medium for the return shipping label. This parameter is only usable, if you do not use **combined printing**. The different option vary from standard paper sizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="combine">If set, label and return label for one shipment will be printed as single PDF document with possibly multiple pages. Else, those two labels come as separate documents. The option does not affect customs documents and COD labels.</param>
        /// <returns>Success response for requests with a single shipment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LabelDataResponse> CreateOrdersAsync(string accept_Language, bool? validate, bool? mustEncode, IncludeDocs3? includeDocs, DocFormat2? docFormat, PrintFormat2? printFormat, RetourePrintFormat2? retourePrintFormat, bool? combine, ShipmentOrderRequest body)
        {
            return CreateOrdersAsync(accept_Language, validate, mustEncode, includeDocs, docFormat, printFormat, retourePrintFormat, combine, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create one or more shipments and their documents. (This is the primary call of the API.)
        /// </summary>
        /// <remarks>
        /// This request is used to create one or more shipments and return corresponding shipment tracking numbers, labels, and documentation. Up to 30 shipments can be created in a single call. 
        /// <br/>#### Request 
        /// <br/>The selected products and corresponding billing numbers, as well as the desired services and package details are required to create a shipment. Each shipment can have a dedicated shipper address. The example request body contains sample values for most services. 
        /// <br/>#### Response 
        /// <br/>The request will return shipment tracking numbers and the applicable labels for each shipment. If multiple shipments have been included, an HTTP 207 response (multistatus) is returned and holds detailed status for each shipment. Other standard HTTP response codes (401, 500, 400, 200, 429) are possible, too. Labels can be either provided as part of the response (base64 encoded for PDF, text for ZPL) or via URL link for view and download. Note that the format settings per query parameters apply to the shipping label. It may also apply to other labels included, depending on the configuration of your account. Label paper for return shipments can be specified separately since a different printer may be used here. If requesting labels to be provided as URL for separate download, the URLs can be shared.
        /// <br/>#### Validation  
        /// <br/>It is recommended to validate the request first prior to shipment creation by setting the `validate` query parameter to `true`. Especially, during development and test, it is recommended to perform this validation. This functionality supports both 
        /// <br/>* JSON schema validation (against this API description). During development and test, it is recommended to do this validation. JSON schema is available for local validation 
        /// <br/>* Dry run against the DHL backend
        /// <br/>
        /// <br/>If this succeeds, actual shipment creation will also succeed.
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="validate">If provided and set to `true`, the input document will be: 
        /// <br/> * validated against JSON schema (/orders/ endpoint) at the API layer. In case of errors, HTTP 400 and details will be returned. 
        /// <br/> * validated against the DHL backend. 
        /// <br/>
        /// <br/>In that case, no state changes are happening, no data is stored, shipments neither deleted nor created, no labels being returned. The call will return a status (200, 400) for each shipment element.</param>
        /// <param name="mustEncode">Legacy name **printOnlyIfCodable**. If set to *true*, labels will only be created if an address is encodable. This is only relevant for German consignee addresses. If set to false or left out, addresses, that are not encodable will be printed even though you receive a warning.</param>
        /// <param name="includeDocs">Legacy name **labelResponseType**. Shipping labels and further shipment documents can be:
        /// <br/> * __include__: included as base64 encoded data in the response (default)
        /// <br/> * __URL__: provided as URL reference.</param>
        /// <param name="docFormat">**Defines** the **printable** document format to be used for label and manifest documents.</param>
        /// <param name="printFormat">**Defines** the print medium for the shipping label. The different option vary from standard paper sizes DIN A4 and DIN A5 to specific label print formats.
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="retourePrintFormat">**Defines** the print medium for the return shipping label. This parameter is only usable, if you do not use **combined printing**. The different option vary from standard paper sizes DIN A4 and DIN A5 to specific label print formats. 
        /// <br/>
        /// <br/>Specific laser print formats using DIN A5 blanks are:
        /// <br/>* 910-300-600(-oz) (105 x 205mm)
        /// <br/>* 910-300-300(-oz) (105 x 148mm)
        /// <br/>
        /// <br/>Specific laser print formats **not** using a DIN A5 blank:
        /// <br/>* 910-300-610 (105 x 208mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Specific thermal print formats:
        /// <br/>* 910-300-600 (103 x 199mm)
        /// <br/>* 910-300-400 (103 x 150mm)
        /// <br/>* 100x70mm
        /// <br/>
        /// <br/>Please use the different formats as follows. If you do not set the parameter the settings of DHL costumer portal account will be used as default.</param>
        /// <param name="combine">If set, label and return label for one shipment will be printed as single PDF document with possibly multiple pages. Else, those two labels come as separate documents. The option does not affect customs documents and COD labels.</param>
        /// <returns>Success response for requests with a single shipment.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabelDataResponse> CreateOrdersAsync(string accept_Language, bool? validate, bool? mustEncode, IncludeDocs3? includeDocs, DocFormat2? docFormat, PrintFormat2? printFormat, RetourePrintFormat2? retourePrintFormat, bool? combine, ShipmentOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            if (validate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("validate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(validate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mustEncode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mustEncode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mustEncode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeDocs != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDocs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDocs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (docFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("docFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(docFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (printFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("printFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(printFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (retourePrintFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("retourePrintFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(retourePrintFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (combine != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("combine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(combine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<LabelDataResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete one or more shipments
        /// </summary>
        /// <remarks>
        /// Delete one or more shipments created earlier. Deletion of shipments is only possible prior to them being manifested (closed out, 'Tagesabschluss'). The call will return HTTP 200 (single shipment) or 207 on success, with individual status elements for each shipment. Individual status elements are HTTP 200, 400. 400 will be returned when shipment does not exist (or was already deleted).
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="profile">Defines the user group profile. A user group is permitted to specific billing numbers. Shipments are only canceled if they belong to a billing number that the user group profile is entitled to use. This attribute is mandatory. Please use the standard user group profile 'STANDARD_GRUPPENPROFIL' if no dedicated user group profile is available.</param>
        /// <param name="shipment">Shipment number that shall be canceled. If multiple shipments shall be canceled, the parameter must be added multiple times. Up to 30 shipments can be canceled at once.</param>
        /// <returns>Response for requests with a single element</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LabelDataResponse> OrdersAccountDeleteAsync(string accept_Language, string profile, string shipment)
        {
            return OrdersAccountDeleteAsync(accept_Language, profile, shipment, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete one or more shipments
        /// </summary>
        /// <remarks>
        /// Delete one or more shipments created earlier. Deletion of shipments is only possible prior to them being manifested (closed out, 'Tagesabschluss'). The call will return HTTP 200 (single shipment) or 207 on success, with individual status elements for each shipment. Individual status elements are HTTP 200, 400. 400 will be returned when shipment does not exist (or was already deleted).
        /// </remarks>
        /// <param name="accept_Language">Control the APIs response language via locale abbreviation. English (en-US) and german (de-DE) are supported. If not specified, the default is english.</param>
        /// <param name="profile">Defines the user group profile. A user group is permitted to specific billing numbers. Shipments are only canceled if they belong to a billing number that the user group profile is entitled to use. This attribute is mandatory. Please use the standard user group profile 'STANDARD_GRUPPENPROFIL' if no dedicated user group profile is available.</param>
        /// <param name="shipment">Shipment number that shall be canceled. If multiple shipments shall be canceled, the parameter must be added multiple times. Up to 30 shipments can be canceled at once.</param>
        /// <returns>Response for requests with a single element</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LabelDataResponse> OrdersAccountDeleteAsync(string accept_Language, string profile, string shipment, System.Threading.CancellationToken cancellationToken)
        {
            if (profile == null)
                throw new System.ArgumentNullException("profile");

            if (shipment == null)
                throw new System.ArgumentNullException("shipment");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("profile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(profile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("shipment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 207)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LabelDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<LabelDataResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Too Many Requests", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RequestStatus>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Response for the API version endpoint detailing version information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ServiceInformation
    {
        [Newtonsoft.Json.JsonProperty("amp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amp Amp { get; set; }

        [Newtonsoft.Json.JsonProperty("backend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Backend Backend { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Encoded document. All types of labels and documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Document
    {
        /// <summary>
        /// The Base64 encoded byte stream
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b64", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string B64 { get; set; }

        /// <summary>
        /// The document in zpl encoding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zpl2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zpl2 { get; set; }

        /// <summary>
        /// URL reference to download document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// format of the encoded bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentFileFormat FileFormat { get; set; }

        /// <summary>
        /// The print format used. Customs documents cash on delivery documents can only be returned in format A4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentPrintFormat PrintFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// General status description for the attached response or response item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class RequestStatus
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The status code of the response. Usually, but not necessarliy the HTTP status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class LabelDataResponse
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }

        /// <summary>
        /// For consistency, response is a single element array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResponseItem> Items { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response for a single shipment containing status, numbers and labels
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ResponseItem
    {
        [Newtonsoft.Json.JsonProperty("shipmentNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ShipmentNo { get; set; }

        [Newtonsoft.Json.JsonProperty("returnShipmentNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnShipmentNo { get; set; }

        [Newtonsoft.Json.JsonProperty("sstatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestStatus Sstatus { get; set; } = new RequestStatus();

        [Newtonsoft.Json.JsonProperty("shipmentRefNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 6)]
        public string ShipmentRefNo { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Label { get; set; }

        [Newtonsoft.Json.JsonProperty("returnLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document ReturnLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("customsDoc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document CustomsDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("codLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document CodLabel { get; set; }

        /// <summary>
        /// Optional validation messages attached to the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationMessageItem> ValidationMessages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Representation of a validation message of a shipment container containing the most important information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ValidationMessageItem
    {
        /// <summary>
        /// The property that is affected by the validation message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        /// <summary>
        /// The validation message describing the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidationMessage { get; set; }

        /// <summary>
        /// The validation state resulting from the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidationState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class GetManifestData
    {
        /// <summary>
        /// The encoded byte stream
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b64", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> B64 { get; set; }

        /// <summary>
        /// The document in zpl encoding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zpl2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zpl2 { get; set; }

        /// <summary>
        /// URL reference to download document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// format of the encoded bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetManifestDataFileFormat FileFormat { get; set; }

        /// <summary>
        /// The print format used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetManifestDataPrintFormat PrintFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class SingleManifestResponse
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("manifestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManifestDate { get; set; }

        [Newtonsoft.Json.JsonProperty("manifest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetManifestData Manifest { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response of the POST /manifests endpoint containing an overall request status and detailed shipment status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class MultipleManifestResponse
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShortResponseItem> Items { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response for a single shipment element not containing labels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShortResponseItem
    {
        [Newtonsoft.Json.JsonProperty("shipmentNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ShipmentNo { get; set; }

        [Newtonsoft.Json.JsonProperty("sstatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestStatus Sstatus { get; set; } = new RequestStatus();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of shipments which shall be manifested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShipmentManifestingRequest
    {
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Profile { get; set; }

        /// <summary>
        /// List of shipment IDs for manifesting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(30)]
        public System.Collections.Generic.ICollection<string> ShipmentNumbers { get; set; }

        /// <summary>
        /// Customer billingNumber number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Bank account data used for CoD (Cash on Delivery).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class BankAccount
    {
        [Newtonsoft.Json.JsonProperty("accountHolder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string AccountHolder { get; set; }

        [Newtonsoft.Json.JsonProperty("bankName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BankName { get; set; }

        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}")]
        public string Iban { get; set; }

        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{8,11}")]
        public string Bic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Commodity line item (e.g. a t-shirt) for international shipments which require individual listing of goods. Each good must contain a description of the item, the amount of the item, the net weight of one single item and the value of one single item. If you ship 5 t-shirts, you need to include the weight and value of one single shirt. The correct final weight and value will be calculated automatically.
    /// <br/>The HS Code and the country of origin are optional.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Commodity
    {
        /// <summary>
        /// A text that describes the commodity item. Only the first 50 characters of the description text is printed on the customs declaration form CN23.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string ItemDescription { get; set; }

        /// <summary>
        /// A valid country code consisting of three characters according to ISO 3166-1 alpha-3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country CountryOfOrigin { get; set; }

        /// <summary>
        /// Harmonized System Code aka Customs tariff number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hsCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 6)]
        public string HsCode { get; set; }

        /// <summary>
        /// How many items of that type are in the package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int PackagedQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("itemValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Value ItemValue { get; set; } = new Value();

        [Newtonsoft.Json.JsonProperty("itemWeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight ItemWeight { get; set; } = new Weight();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Consignee address information. Either a doorstep address (contact address) including contact information or a droppoint address. One of packstation (parcel locker), or post office (postfiliale/retail shop).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Consignee
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// For international shipments, this section contains information necessary for customs about the exported goods. ExportDocument can contain one or more positions as child element. This data is also transferred as electronic declaration to customs. The custom details are mandatory depending on whether the parcel will go to a country outside the European Customs Union. For DHL Parcel International (V53WPAK) CN23 will returned as a separate document, while for Warenpost International the customs information will be printed onto the shipment label (CN22).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class CustomsDetails
    {
        /// <summary>
        /// Invoice number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoiceNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string InvoiceNo { get; set; }

        /// <summary>
        /// This contains the category of goods contained in parcel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsDetailsExportType ExportType { get; set; }

        /// <summary>
        /// Mandatory if exporttype is 'OTHER'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExportDescription { get; set; }

        /// <summary>
        /// Aka 'Terms of Trade' aka 'Frankatur'. The attribute is exclusively used for the product Europaket (V54EPAK). DDU is deprecated (use DAP instead).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingConditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsDetailsShippingConditions ShippingConditions { get; set; }

        /// <summary>
        /// Permit number. Very rarely needed. Mostly relevant for higher value goods. An example use case would be an item made from crocodile leather which requires dedicated license / permit identified by that number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permitNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string PermitNo { get; set; }

        /// <summary>
        /// Attest or certification identified by this number. Very rarely needed. An example use case would be a medical shipment referring to an attestation that a certain amount of medicine may be imported within e.g. the current quarter of the year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attestationNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AttestationNo { get; set; }

        /// <summary>
        /// flag confirming whether electronic record for export was made
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasElectronicExportNotification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasElectronicExportNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("MRN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(18)]
        public string MRN { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCharges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Value PostalCharges { get; set; } = new Value();

        /// <summary>
        /// Optional. Will appear on CN23.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeOfOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string OfficeOfOrigin { get; set; }

        /// <summary>
        /// Optional. The customs reference is used by customs authorities to identify economics operators an/or other persons involved. With the given reference, granted authorizations and/or relevant processes in customs clearance an/or taxation can be taken into account. Aka Zoll-Nummer or EORI-Number but dependent on destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipperCustomsRef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ShipperCustomsRef { get; set; }

        /// <summary>
        /// Optional. The customs reference is used by customs authorities to identify economics operators an/or other persons involved. With the given reference, granted authorizations and/or relevant processes in customs clearance an/or taxation can be taken into account. Aka Zoll-Nummer or EORI-Number but dependent on destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consigneeCustomsRef", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string ConsigneeCustomsRef { get; set; }

        /// <summary>
        /// Commodity types in that package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<Commodity> Items { get; set; } = new System.Collections.ObjectModel.Collection<Commodity>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Physical dimensions (aka 'Gurtmass') of the parcel. If you provide the dimension information, all attributes need to be provided. You cannot provide just the height, for example. If you provide length, width, and height in millimeters, they will be rounded to full cm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Dimensions
    {
        /// <summary>
        /// Unit of metric, applies to all dimensions contained.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionsUom Uom { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public int Length { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Only usable for German Packstation, international lockers cannot be addressed directly. If your customer wishes for international delivery to a droppoint, please use DHL Parcel International (V53WPAK) with the delivery type "Closest Droppoint".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Locker
    {
        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Packstationnummer. Three digit number identifying the parcel locker in conjunction with city and postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lockerID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(100, 999)]
        public int LockerID { get; set; }

        /// <summary>
        /// postNumber (Postnummer) is the official account number a private DHL Customer gets upon registration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{6,10}$")]
        public string PostNumber { get; set; }

        /// <summary>
        /// City where the locker is located
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; }

        /// <summary>
        /// A valid country code consisting of three characters according to ISO 3166-1 alpha-3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$")]
        public string PostalCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Only usable for German post offices or retail outlets (Paketshops), international postOffices or retail outlets cannot be addressed directly. If your customer wishes for international delivery to a droppoint, please use DHL Parcel International (V53WPAK) with the delivery type "Closest Droppoint".
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class PostOffice
    {
        /// <summary>
        /// Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Id or Number of Post office / Filiale / outlet / parcel shop
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retailID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(401, 999)]
        public int RetailID { get; set; }

        /// <summary>
        /// postNumber (Postnummer) is the official account number a private DHL Customer gets upon registration. To address a post office or retail outlet directly, either the post number or e-mail address of the consignee is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{6,10}$")]
        public string PostNumber { get; set; }

        /// <summary>
        /// Email address of the consignee. To address a post office or retail outlet directly, either the post number or e-mail address of the consignee is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 3)]
        public string Email { get; set; }

        /// <summary>
        /// City where the retail location is
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string City { get; set; }

        /// <summary>
        /// A valid country code consisting of three characters according to ISO 3166-1 alpha-3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$")]
        public string PostalCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Alternative destination - P.O. Box (Postfach)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class POBox
    {
        /// <summary>
        /// Name1. Line 1 of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name1 { get; set; }

        /// <summary>
        /// An optional, additional line of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name2 { get; set; }

        /// <summary>
        /// An optional, additional line of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name3 { get; set; }

        /// <summary>
        /// Number of P.O. Box (Postfach)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("poBoxID", Required = Newtonsoft.Json.Required.Always)]
        public int PoBoxID { get; set; }

        /// <summary>
        /// Email address of the consignee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 3)]
        public string Email { get; set; }

        /// <summary>
        /// City of the P.O. Box (Postfach) location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string City { get; set; }

        /// <summary>
        /// Country of the P.O. Box (Postfach) location. A valid country code consisting of three characters according to ISO 3166-1 alpha-3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country { get; set; }

        /// <summary>
        /// Postal code of the P.O. Box (Postfach) location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$")]
        public string PostalCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Container for all shipments. Mixed shipment products per request are supported. Each shipment has a dedicated shipper address (or shipper reference, or both).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Shipment
    {
        /// <summary>
        /// Determines the DHL Paket product to be used.
        /// <br/>
        /// <br/>* V01PAK: DHL PAKET;
        /// <br/>* V53WPAK: DHL PAKET International;
        /// <br/>* V54EPAK: DHL Europaket;
        /// <br/>* V62WP: Warenpost;
        /// <br/>* V66WPI: Warenpost International
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }

        /// <summary>
        /// 14 digit long number that identifies the contract the shipment is booked on. Please note that in rare cases the last to characters can be letters. Digit 11 and digit 12 must correspondent to the number of the product, e.g. 333333333301tt can only be used for the product V01PAK (DHL Paket).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\w{10}\d{2}\w{2}")]
        public string BillingNumber { get; set; }

        /// <summary>
        /// A reference number that the user can assign for better association purposes. It appears on shipment labels. To use the reference number for tracking purposes, it should be at least 8 characters long and unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 8)]
        public string RefNo { get; set; }

        /// <summary>
        /// Textfield that appears on the shipment label. It cannot be used to search for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costCenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CostCenter { get; set; }

        /// <summary>
        /// Is only to be indicated by DHL partners.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationSoftware", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationSoftware { get; set; }

        /// <summary>
        /// Date the shipment is transferred to DHL. The shipment date can be the current date or a date up to a few days in the future. It must not be in the past. Iso format required: yyyy-mm-dd. On the shipment date the shipment will be automatically closed at your end of day closing time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ShipDate { get; set; }

        /// <summary>
        /// Shipper information, including contact information and address. Alternatively, a predefined shipper reference can be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shipper Shipper { get; set; }

        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Consignee Consignee { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDetails Details { get; set; }

        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VAS Services { get; set; }

        [Newtonsoft.Json.JsonProperty("customs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsDetails Customs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details for the shipment, such as dimensions, content
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShipmentDetails
    {
        [Newtonsoft.Json.JsonProperty("dim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions Dim { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Complex request structure used to create, update, and validate shipment data. Note that most elements are part of the array of shipment items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShipmentOrderRequest
    {
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Profile { get; set; }

        /// <summary>
        /// Shipment array having details for each shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(30)]
        public System.Collections.Generic.ICollection<Shipment> Shipments { get; set; } = new System.Collections.ObjectModel.Collection<Shipment>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Shipper information, including contact information and address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Shipper
    {
        /// <summary>
        /// Name1. Line 1 of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name1 { get; set; }

        /// <summary>
        /// An optional, additional line of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name2 { get; set; }

        /// <summary>
        /// An optional, additional line of name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name3 { get; set; }

        /// <summary>
        /// Line 1 of the street address. This is just the street name. Can also include house number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressStreet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string AddressStreet { get; set; }

        /// <summary>
        /// Line 1 of the street address. This is just the house number. Can be added to street name instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressHouse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string AddressHouse { get; set; }

        /// <summary>
        /// Mandatory for all countries but Ireland that use a postal code system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$")]
        public string PostalCode { get; set; }

        /// <summary>
        /// city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string City { get; set; }

        /// <summary>
        /// Shipper address country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country Country { get; set; }

        /// <summary>
        /// optional contact name. (this is not the primary name printed on label)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 3)]
        public string ContactName { get; set; }

        /// <summary>
        /// Optional contact email address of the shipper
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 3)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains a reference to the Shipper data configured in GKP(GeschÃ¤ftskundenportal - Business Costumer Portal). Can be used instead of a detailed shipper address. The shipper reference can be used to print a company logo which is configured in GKP onto the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ShipperReference
    {
        /// <summary>
        /// Reference string to the shipper data configured in GKP(GeschÃ¤ftskundenportal - Business Costumer Portal).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipperRef", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ShipperRef { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Value added services. Please note that services are specific to products and geographies and/or may require individual setup and billing numbers. Please test and contact your account representative in case of questions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VAS
    {
        /// <summary>
        /// Preferred neighbour. Can be specified as text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredNeighbour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PreferredNeighbour { get; set; }

        /// <summary>
        /// Preferred location. Can be specified as text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string PreferredLocation { get; set; }

        /// <summary>
        /// if used it will trigger checking the age of recipient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visualCheckOfAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"A16|A18")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VASVisualCheckOfAge VisualCheckOfAge { get; set; }

        /// <summary>
        /// Delivery can only be signed for by yourself personally.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namedPersonOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NamedPersonOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("identCheck", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VASIdentCheck IdentCheck { get; set; }

        /// <summary>
        /// Delivery must be signed for by the recipient and not by DHL staff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signedForByRecipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SignedForByRecipient { get; set; }

        /// <summary>
        /// Instructions and endorsement how to treat international undeliverable shipment. By default, shipments are returned if undeliverable. There are country specific rules whether the shipment is returned immediately or after a grace period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endorsement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VASEndorsement Endorsement { get; set; }

        /// <summary>
        /// Preferred day of delivery in format YYYY-MM-DD. Shipper can request a preferred day of delivery. The preferred day should be between 2 and 6 working days after handover to DHL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PreferredDay { get; set; }

        /// <summary>
        /// Delivery can only be signed for by yourself personally or by members of your household.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noNeighbourDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NoNeighbourDelivery { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalInsurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value AdditionalInsurance { get; set; }

        /// <summary>
        /// Leaving this out is same as setting to false. Sperrgut.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bulkyGoods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BulkyGoods { get; set; }

        [Newtonsoft.Json.JsonProperty("cashOnDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VASCashOnDelivery CashOnDelivery { get; set; }

        /// <summary>
        /// Special instructions for delivery. 2 character code, possible values agreed in contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("individualSenderRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{2}")]
        public string IndividualSenderRequirement { get; set; }

        /// <summary>
        /// Choice of premium vs economy parcel. Availability is country dependent and may be manipulated by DHL if choice is not available. Please review the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Premium { get; set; }

        /// <summary>
        /// Closest Droppoint Delivery to the droppoint closest to the address of the recipient of the shipment. For this kind of delivery either the phone number and/or the e-mail address of the receiver is mandatory. For shipments using DHL Paket International it is recommended that you choose one of the three delivery types: Economy, Premium, CDP. Otherwise, the current default for the receiver country will be picked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("closestDropPoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ClosestDropPoint { get; set; }

        /// <summary>
        /// Undeliverable domestic shipment can be forwarded and held at retail. Notification to email (fallback: consignee email) will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parcelOutletRouting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParcelOutletRouting { get; set; }

        [Newtonsoft.Json.JsonProperty("dhlRetoure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VASDhlRetoure DhlRetoure { get; set; }

        /// <summary>
        /// All import duties are paid by the shipper.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalDeliveryDutyPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PostalDeliveryDutyPaid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Cash on delivery (Nachnahme). Currency must be Euro. Either bank account information or account reference (from customer profile) must be provided. Transfernote1 + 2 are references transmitted during bank transfer. Providing account information explicitly requires elevated privileges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VASCashOnDelivery
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// Reference to bank account details. Account references are maintained in customer settings in Post &amp; DHL business customer portal under Ship -&gt; Settings -&gt; Cash on delivery. Please note, that the default account reference is used if the provided account reference does not exist in your customer settings!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string AccountReference { get; set; }

        [Newtonsoft.Json.JsonProperty("transferNote1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string TransferNote1 { get; set; }

        [Newtonsoft.Json.JsonProperty("transferNote2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string TransferNote2 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Requests return label (aka 'retoure') to be provided. Also requires returnAddress and return billing number. Neither weight nor dimension need to be specified for the retoure (flat rate service).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VASDhlRetoure
    {
        [Newtonsoft.Json.JsonProperty("billingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\w{10}\d{2}\w{2}")]
        public string BillingNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("refNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 6)]
        public string RefNo { get; set; }

        [Newtonsoft.Json.JsonProperty("returnAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Consignee ReturnAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Check the identity of the recipient via name (firstname, lastname), date of birth or age. This uses firstName and lastName as separate attributes since for identity check an automatic split of a one-line name is not considered reliable enough.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class VASIdentCheck
    {
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string LastName { get; set; }

        /// <summary>
        /// date of birth, used in conjunction with minimumAge and shipping date. Format yyyy-mm-dd is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DateOfBirth { get; set; }

        /// <summary>
        /// Checks if recipient will have reached specified age by shipping date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"A16|A18")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VASIdentCheckMinimumAge MinimumAge { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A valid country code consisting of three characters according to ISO 3166-1 alpha-3.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ABW")]
        ABW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AFG")]
        AFG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AGO")]
        AGO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AIA")]
        AIA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALA")]
        ALA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ALB")]
        ALB = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AND")]
        AND = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ARE")]
        ARE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ARG")]
        ARG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ARM")]
        ARM = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ASM")]
        ASM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ATG")]
        ATG = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AUS")]
        AUS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AUT")]
        AUT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AZE")]
        AZE = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BDI")]
        BDI = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BEL")]
        BEL = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BEN")]
        BEN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BES")]
        BES = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BFA")]
        BFA = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BGD")]
        BGD = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BGR")]
        BGR = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BHR")]
        BHR = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BHS")]
        BHS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BIH")]
        BIH = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BLM")]
        BLM = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BLR")]
        BLR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"BLZ")]
        BLZ = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"BMU")]
        BMU = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"BOL")]
        BOL = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"BRA")]
        BRA = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"BRB")]
        BRB = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"BRN")]
        BRN = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"BVT")]
        BVT = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"BWA")]
        BWA = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"CAF")]
        CAF = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CAN")]
        CAN = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CCK")]
        CCK = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CHL")]
        CHL = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CHN")]
        CHN = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"CIV")]
        CIV = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"CMR")]
        CMR = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"COD")]
        COD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"COG")]
        COG = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"COK")]
        COK = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"COL")]
        COL = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"COM")]
        COM = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"CPV")]
        CPV = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"CRI")]
        CRI = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CUB")]
        CUB = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"CUW")]
        CUW = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"CXR")]
        CXR = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"CYM")]
        CYM = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"CYP")]
        CYP = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"CZE")]
        CZE = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"DEU")]
        DEU = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"DJI")]
        DJI = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"DMA")]
        DMA = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"DNK")]
        DNK = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DOM")]
        DOM = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DZA")]
        DZA = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"ECU")]
        ECU = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"EGY")]
        EGY = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"ERI")]
        ERI = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"ESP")]
        ESP = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"EST")]
        EST = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"ETH")]
        ETH = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"FIN")]
        FIN = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"FJI")]
        FJI = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"FLK")]
        FLK = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"FRA")]
        FRA = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"FRO")]
        FRO = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"FSM")]
        FSM = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"GAB")]
        GAB = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"GBR")]
        GBR = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"GEO")]
        GEO = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"GGY")]
        GGY = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"GHA")]
        GHA = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"GIB")]
        GIB = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"GIN")]
        GIN = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"GLP")]
        GLP = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"GMB")]
        GMB = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"GNB")]
        GNB = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GNQ")]
        GNQ = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GRC")]
        GRC = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"GRD")]
        GRD = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"GRL")]
        GRL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"GTM")]
        GTM = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"GUF")]
        GUF = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"GUM")]
        GUM = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"GUY")]
        GUY = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"HKG")]
        HKG = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"HMD")]
        HMD = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"HND")]
        HND = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"HRV")]
        HRV = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"HTI")]
        HTI = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HUN")]
        HUN = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"IDN")]
        IDN = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"IMN")]
        IMN = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"IND")]
        IND = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"IRL")]
        IRL = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"IRN")]
        IRN = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"IRQ")]
        IRQ = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"ISL")]
        ISL = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"ISR")]
        ISR = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"ITA")]
        ITA = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"JAM")]
        JAM = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"JEY")]
        JEY = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"JOR")]
        JOR = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"JPN")]
        JPN = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"KAZ")]
        KAZ = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"KEN")]
        KEN = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"KGZ")]
        KGZ = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"KHM")]
        KHM = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"KIR")]
        KIR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"KNA")]
        KNA = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"KOR")]
        KOR = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"KWT")]
        KWT = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"LAO")]
        LAO = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"LBN")]
        LBN = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"LBR")]
        LBR = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"LBY")]
        LBY = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"LCA")]
        LCA = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"LIE")]
        LIE = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"LKA")]
        LKA = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"LSO")]
        LSO = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"LTU")]
        LTU = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"LUX")]
        LUX = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"LVA")]
        LVA = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"MAC")]
        MAC = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"MAF")]
        MAF = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"MAR")]
        MAR = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"MCO")]
        MCO = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"MDA")]
        MDA = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"MDG")]
        MDG = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"MDV")]
        MDV = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"MEX")]
        MEX = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"MHL")]
        MHL = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"MLI")]
        MLI = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"MLT")]
        MLT = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"MMR")]
        MMR = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"MNE")]
        MNE = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"MNG")]
        MNG = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"MNP")]
        MNP = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"MOZ")]
        MOZ = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"MRT")]
        MRT = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"MSR")]
        MSR = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"MTQ")]
        MTQ = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"MUS")]
        MUS = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"MWI")]
        MWI = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"MYS")]
        MYS = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"MYT")]
        MYT = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"NAM")]
        NAM = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"NCL")]
        NCL = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"NER")]
        NER = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NFK")]
        NFK = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"NGA")]
        NGA = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"NIC")]
        NIC = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"NIU")]
        NIU = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"NLD")]
        NLD = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"NOR")]
        NOR = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"NPL")]
        NPL = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"NRU")]
        NRU = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"NZL")]
        NZL = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"OMN")]
        OMN = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"PAK")]
        PAK = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"PAN")]
        PAN = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"PCN")]
        PCN = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"PER")]
        PER = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"PHL")]
        PHL = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"PLW")]
        PLW = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"POL")]
        POL = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"PRI")]
        PRI = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"PRK")]
        PRK = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"PRT")]
        PRT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"PRY")]
        PRY = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"PSE")]
        PSE = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"PYF")]
        PYF = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"QAT")]
        QAT = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"REU")]
        REU = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"ROU")]
        ROU = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"RUS")]
        RUS = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"RWA")]
        RWA = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"SAU")]
        SAU = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"SDN")]
        SDN = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"SEN")]
        SEN = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"SGP")]
        SGP = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"SHN")]
        SHN = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"SJM")]
        SJM = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"SLB")]
        SLB = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SLE")]
        SLE = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"SLV")]
        SLV = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"SMR")]
        SMR = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"SOM")]
        SOM = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"SPM")]
        SPM = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"SRB")]
        SRB = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"SSD")]
        SSD = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"STP")]
        STP = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SUR")]
        SUR = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"SVK")]
        SVK = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SVN")]
        SVN = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SWE")]
        SWE = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"SWZ")]
        SWZ = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"SXM")]
        SXM = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"SYC")]
        SYC = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"SYR")]
        SYR = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"TCA")]
        TCA = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"TCD")]
        TCD = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"TGO")]
        TGO = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"THA")]
        THA = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"TJK")]
        TJK = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"TKL")]
        TKL = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"TKM")]
        TKM = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS")]
        TLS = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"TON")]
        TON = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"TTO")]
        TTO = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"TUN")]
        TUN = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"TUR")]
        TUR = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"TUV")]
        TUV = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"TWN")]
        TWN = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"TZA")]
        TZA = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"UGA")]
        UGA = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"UKR")]
        UKR = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"URY")]
        URY = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"USA")]
        USA = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"UZB")]
        UZB = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"VCT")]
        VCT = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"VEN")]
        VEN = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"VGB")]
        VGB = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"VIR")]
        VIR = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"VNM")]
        VNM = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"VUT")]
        VUT = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"WLF")]
        WLF = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"WSM")]
        WSM = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"YEM")]
        YEM = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAF")]
        ZAF = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMB")]
        ZMB = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"ZWE")]
        ZWE = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 243,

    }

    /// <summary>
    /// Currency and numeric value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Value
    {
        /// <summary>
        /// iso 4217 3 character currency code accepted. Recommended to use EUR where possible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueCurrency Currency { get; set; }

        /// <summary>
        /// Numeric value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100000D)]
        public double Value1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Weight of item or shipment. Both uom and value are required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Weight
    {
        /// <summary>
        /// metric unit for weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUom Uom { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 31500D)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncludeDocs
    {

        [System.Runtime.Serialization.EnumMember(Value = @"include")]
        Include = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL2")]
        ZPL2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrintFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RetourePrintFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncludeDocs2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"include")]
        Include = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncludeDocs3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"include")]
        Include = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocFormat2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL2")]
        ZPL2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrintFormat2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RetourePrintFormat2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Amp
    {
        /// <summary>
        /// name of api
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("env", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Env { get; set; }

        /// <summary>
        /// version of api
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// revision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class Backend
    {
        /// <summary>
        /// environment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("env", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Env { get; set; }

        /// <summary>
        /// version of backend
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentFileFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL2")]
        ZPL2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentPrintFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A4-PT")]
        A4PT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 11,

        /*
         * ADDED THIS LINE MANUALLY TO GENERATED CODE!
         * 
         * PLEASE DO NOT TOUCH! USE VALUE 910-300-400 or 910-300-410 RESULTS IN 910-300-400/410!
         * 
         * ADDED THIS LINE MANUALLY TO GENERATED CODE!
         */
        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400/410")]
        _910300400410 = 12,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetManifestDataFileFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPL2")]
        ZPL2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetManifestDataPrintFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-600")]
        _910300600 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-610")]
        _910300610 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700")]
        _910300700 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-700-oz")]
        _910300700Oz = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-710")]
        _910300710 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300")]
        _910300300 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-300-oz")]
        _910300300Oz = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-400")]
        _910300400 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"910-300-410")]
        _910300410 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"100x70mm")]
        _100x70mm = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsDetailsExportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESENT")]
        PRESENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_SAMPLE")]
        COMMERCIAL_SAMPLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DOCUMENT")]
        DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_OF_GOODS")]
        RETURN_OF_GOODS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_GOODS")]
        COMMERCIAL_GOODS = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsDetailsShippingConditions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
        DDU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
        DAP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
        DDP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DDX")]
        DDX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DXV")]
        DXV = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionsUom
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cm")]
        Cm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"mm")]
        Mm = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VASVisualCheckOfAge
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A16")]
        A16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A18")]
        A18 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VASEndorsement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN")]
        RETURN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ABANDON")]
        ABANDON = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VASIdentCheckMinimumAge
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A16")]
        A16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A18")]
        A18 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValueCurrency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AED")]
        AED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AFN")]
        AFN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AMD")]
        AMD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ANG")]
        ANG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AOA")]
        AOA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ARS")]
        ARS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AUD")]
        AUD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AWG")]
        AWG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AZN")]
        AZN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BAM")]
        BAM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BBD")]
        BBD = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BDT")]
        BDT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"BGN")]
        BGN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"BHD")]
        BHD = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"BIF")]
        BIF = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"BMD")]
        BMD = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"BND")]
        BND = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"BOB")]
        BOB = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"BOV")]
        BOV = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BRL")]
        BRL = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BSD")]
        BSD = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BTN")]
        BTN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BWP")]
        BWP = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BYR")]
        BYR = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BZD")]
        BZD = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"CAD")]
        CAD = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CDF")]
        CDF = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CHE")]
        CHE = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"CHF")]
        CHF = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CHW")]
        CHW = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CLF")]
        CLF = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CLP")]
        CLP = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"CNY")]
        CNY = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"COP")]
        COP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"COU")]
        COU = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"CUC")]
        CUC = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"CUP")]
        CUP = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CZK")]
        CZK = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DJF")]
        DJF = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"DKK")]
        DKK = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"DOP")]
        DOP = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"DZD")]
        DZD = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"EGP")]
        EGP = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"ERN")]
        ERN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"ETB")]
        ETB = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"EUR")]
        EUR = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"FJD")]
        FJD = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"FKP")]
        FKP = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"GBP")]
        GBP = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"GEL")]
        GEL = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"GHS")]
        GHS = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"GIP")]
        GIP = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"GMD")]
        GMD = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"GNF")]
        GNF = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"GTQ")]
        GTQ = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"GYD")]
        GYD = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"HKD")]
        HKD = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"HNL")]
        HNL = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"HRK")]
        HRK = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"HTG")]
        HTG = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"HUF")]
        HUF = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"IDR")]
        IDR = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"ILS")]
        ILS = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"INR")]
        INR = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"IQD")]
        IQD = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"IRR")]
        IRR = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"ISK")]
        ISK = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"JMD")]
        JMD = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"JOD")]
        JOD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"JPY")]
        JPY = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"KES")]
        KES = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"KGS")]
        KGS = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"KHR")]
        KHR = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"KMF")]
        KMF = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"KPW")]
        KPW = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"KRW")]
        KRW = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"KWD")]
        KWD = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"KYD")]
        KYD = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"KZT")]
        KZT = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"LAK")]
        LAK = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"LBP")]
        LBP = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"LKR")]
        LKR = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"LRD")]
        LRD = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"LSL")]
        LSL = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"LTL")]
        LTL = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"LVL")]
        LVL = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"LYD")]
        LYD = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"MAD")]
        MAD = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"MDL")]
        MDL = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"MGA")]
        MGA = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"MKD")]
        MKD = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"MMK")]
        MMK = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MNT")]
        MNT = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"MOP")]
        MOP = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"MRO")]
        MRO = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MUR")]
        MUR = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"MVR")]
        MVR = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"MWK")]
        MWK = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MXN")]
        MXN = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MXV")]
        MXV = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"MYR")]
        MYR = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"MZN")]
        MZN = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"NAD")]
        NAD = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"NGN")]
        NGN = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"NIO")]
        NIO = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"NOK")]
        NOK = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"NPR")]
        NPR = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"NZD")]
        NZD = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"OMR")]
        OMR = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"PAB")]
        PAB = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"PEN")]
        PEN = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"PGK")]
        PGK = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"PHP")]
        PHP = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"PKR")]
        PKR = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"PLN")]
        PLN = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PYG")]
        PYG = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"QAR")]
        QAR = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"RON")]
        RON = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"RSD")]
        RSD = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"RUB")]
        RUB = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"RWF")]
        RWF = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"SAR")]
        SAR = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"SBD")]
        SBD = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"SCR")]
        SCR = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"SDG")]
        SDG = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"SEK")]
        SEK = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"SGD")]
        SGD = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"SHP")]
        SHP = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"SLL")]
        SLL = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"SOS")]
        SOS = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"SRD")]
        SRD = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"SSP")]
        SSP = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"STD")]
        STD = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"SYP")]
        SYP = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"SZL")]
        SZL = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"THB")]
        THB = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"TJS")]
        TJS = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"TMT")]
        TMT = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"TND")]
        TND = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"TRY")]
        TRY = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"TTD")]
        TTD = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"TWD")]
        TWD = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"TZS")]
        TZS = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"UAH")]
        UAH = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"UGX")]
        UGX = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"USD")]
        USD = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"USN")]
        USN = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"USS")]
        USS = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"UYI")]
        UYI = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"UYU")]
        UYU = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"UZS")]
        UZS = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
        VEF = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"VND")]
        VND = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"VUV")]
        VUV = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"WST")]
        WST = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"XAF")]
        XAF = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"XAG")]
        XAG = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"XAU")]
        XAU = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"XBA")]
        XBA = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"XBB")]
        XBB = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"XBC")]
        XBC = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"XBD")]
        XBD = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"XCD")]
        XCD = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"XDR")]
        XDR = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"XFU")]
        XFU = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"XOF")]
        XOF = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
        XPD = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"XPF")]
        XPF = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"XPT")]
        XPT = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"XXX")]
        XXX = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"YER")]
        YER = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"ZAR")]
        ZAR = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"ZMW")]
        ZMW = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 177,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUom
    {

        [System.Runtime.Serialization.EnumMember(Value = @"g")]
        G = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"kg")]
        Kg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603